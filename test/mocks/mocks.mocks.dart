// Mocks generated by Mockito 5.4.6 from annotations
// in open_password_manager/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:open_password_manager/features/auth/domain/entities/opm_user.dart'
    as _i2;
import 'package:open_password_manager/features/auth/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:open_password_manager/shared/domain/repositories/clipboard_repository.dart'
    as _i7;
import 'package:open_password_manager/shared/domain/repositories/cryptography_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOpmUser_0 extends _i1.SmartFake implements _i2.OpmUser {
  _FakeOpmUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createAccount({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createAccount, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.OpmUser> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.OpmUser>.value(
              _FakeOpmUser_0(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i4.Future<_i2.OpmUser>);
}

/// A class which mocks [CryptographyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptographyRepository extends _i1.Mock
    implements _i5.CryptographyRepository {
  MockCryptographyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init(String? password) =>
      (super.noSuchMethod(
            Invocation.method(#init, [password]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<String> encrypt(String? plainText) =>
      (super.noSuchMethod(
            Invocation.method(#encrypt, [plainText]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#encrypt, [plainText]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> decrypt(String? encrypted) =>
      (super.noSuchMethod(
            Invocation.method(#decrypt, [encrypted]),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#decrypt, [encrypted]),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [ClipboardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockClipboardRepository extends _i1.Mock
    implements _i7.ClipboardRepository {
  MockClipboardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> copyToClipboard(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#copyToClipboard, [text]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
