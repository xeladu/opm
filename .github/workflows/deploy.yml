name: Deploy Workflow
on:
  push:
    branches:
      - "release/**"

jobs:
  check-branch:
    name: Validate branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code

      - name: Check branch name
        run: |
          BRANCH_NAME=${{ github.ref }}
          if [[ "$BRANCH_NAME" != "refs/heads/release/"* ]]; then
            echo "This workflow can only be run on release branches!"
            echo "Create a release branch x.y.z and execute the workflow on that branch!"
            exit 1
          fi

      - name: Update pubspec version
        run: |
          BRANCH_NAME=${{ github.ref }}
          BRANCH_VERSION=${BRANCH_NAME#refs/heads/release/}

          echo "Updating version to: $BRANCH_VERSION"
          
          NEW_VERSION="$BRANCH_VERSION"

          sed -i "s/^version:.*/version: $NEW_VERSION/" pubspec.yaml

          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

          git add pubspec.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update version to $NEW_VERSION"
            git push origin ${{ github.ref_name }}
            echo "✅ Version updated and pushed successfully"
          fi

  prepare:
    name: Prepare environment
    runs-on: ubuntu-latest
    needs: check-branch
    outputs:
      config-json: ${{ steps.config-output.outputs.config-json }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

      - name: Generate Firebase Configuration File
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          FIREBASE_VAULT_COLLECTION_PREFIX: ${{ secrets.FIREBASE_VAULT_COLLECTION_PREFIX }}
          FIREBASE_UTILS_COLLECTION_NAME: ${{ secrets.FIREBASE_UTILS_COLLECTION_NAME }}
        run: dart run scripts/generate_config.dart config.json
        shell: bash

      - name: Set Configuration Output
        id: config-output
        run: |
          CONFIG_CONTENT=$(base64 -w 0 config.json)
          echo "config-json=$CONFIG_CONTENT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Get Flutter Dependencies
        run: flutter pub get
        shell: bash

      - name: Analyze Project
        run: flutter analyze
        shell: bash

      - name: Run Tests
        run: |
          flutter test --coverage

          LH_TOTAL=0
          LF_TOTAL=0

          while IFS= read -r line; do
            if [[ $line == LH:* ]]; then
              LH_VALUE=${line#LH:}
              ((LH_TOTAL+=LH_VALUE))
            elif [[ $line == LF:* ]]; then
              LF_VALUE=${line#LF:}
              ((LF_TOTAL+=LF_VALUE))
            fi
          done < coverage/lcov.info

          if [[ $LF_TOTAL -gt 0 ]]; then
            # pass shell vars into awk to avoid any quoting issues
            TOTAL_COVERAGE=$(awk -v lh="$LH_TOTAL" -v lf="$LF_TOTAL" 'BEGIN { if (lf > 0) printf "%.1f", (lh/lf)*100; else printf "0" }')
          else
            TOTAL_COVERAGE=0
          fi

          if (( $(echo "$TOTAL_COVERAGE > 90" | bc -l) )); then
            ICON="✅✅✅"
          elif (( $(echo "$TOTAL_COVERAGE > 80" | bc -l) )); then
            ICON="✅✅"
          elif (( $(echo "$TOTAL_COVERAGE > 70" | bc -l) )); then
            ICON="✅"
          elif (( $(echo "$TOTAL_COVERAGE > 50" | bc -l) )); then
            ICON="⚠️"
          else
            ICON="❌"
          fi

          echo "$ICON Total Coverage: $TOTAL_COVERAGE%"
        shell: bash

  deploy-web:
    name: Deploy production web app
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

      - name: Build web app
        run: flutter build web

      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_OPM_TOOL }}
          channelId: live
          projectId: opm-tool

  deploy-android:
    name: Upload Android app
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

      - name: Decode Android keystore
        env:
          KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_B64" | base64 --decode > android/keystore.jks
          echo "keystore decoded"
        shell: bash

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
        shell: bash

      - name: Build Android app bundle (release)
        run: flutter build appbundle --release
        shell: bash

      - name: Upload to Google Play (internal testing)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: org.quickcoder.open_password_manager
          releaseFiles: build/app/outputs/bundle/release/*.aab
          track: internal
          status: completed
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

  deploy-ios:
    name: Upload iOS app
    needs: prepare
    runs-on: macos-15
    if: ${{ false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

  deploy-windows:
    name: Upload Windows app
    needs: prepare
    runs-on: windows-latest
    if: ${{ false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

  deploy-linux:
    name: Upload Linux app
    needs: prepare
    runs-on: ubuntu-latest
    if: ${{ false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

  deploy-macos:
    name: Upload MacOS app
    needs: prepare
    runs-on: macos-15
    if: ${{ false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Restore Configuration File
        run: |
          echo "${{ needs.prepare.outputs.config-json }}" | base64 -d > config.json
        shell: bash

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: pubspec.yaml
          channel: "stable"
          cache: true

  create-release:
    name: Create tag and release
    needs:
      [
        deploy-web,
        deploy-android,
        deploy-ios,
        deploy-windows,
        deploy-macos,
        deploy-linux,
      ]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/release/}
          TAG_NAME="v$BRANCH_NAME"
          echo "RELEASE_VERSION=$BRANCH_NAME" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "::set-output name=tag::$TAG_NAME"

      - name: Create Git tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git tag -a "${TAG_NAME}" -m "${TAG_NAME}"
          git push origin "${TAG_NAME}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
